# Triangular, pentagonal, and hexagonal
"""
Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.
"""

def get_tri(n):
    return n*(n+1) /2

def get_penta(n):
    return n*(3*n -1) /2

def get_hexa(n):
    return n*(2*n -1)

def get_reverse(n, method):
    i = 1
    if method == 'tri':
        while get_tri(i) != n:
            i += 1
    if method == 'penta':
        while get_penta(i) != n:
            i += 1
    if method == 'hexa':
        while get_hexa(i) != n:
            i += 1
    return i

def get_next_equal(n): 

    index_tri = get_reverse(n, 'tri')
    index_penta = get_reverse(n, 'penta')
    index_hexa = get_reverse(n, 'hexa')
    
#    tri_list = [get_tri(i) for i in range(1,index_tri +1)]
    penta_list = [get_penta(i) for i in range(1,index_penta +1)]
    hexa_list = [get_hexa(i) for i in range(1,index_hexa +1)]
    
    while True:
        index_tri += 1
        index_penta += 1
        index_hexa += 1
        
#        tri_list.append(get_tri(index_tri))
        penta_list.append(get_penta(index_penta))
        hexa_list.append(get_hexa(index_hexa))
        
        if get_tri(index_tri) in penta_list and get_tri(index_tri) in hexa_list:
            return get_tri(index_tri)
        
## other way
def get_answer(n):
    index_tri = get_reverse(n, 'tri') +1
    index_penta = get_reverse(n, 'penta') +1
    index_hexa = get_reverse(n, 'hexa') +1
    
    while True:
        t = int(get_tri(index_tri))
        p = int(get_penta(index_penta))
        h = int(get_hexa(index_hexa))
        
        if t == p == h:
            return t
        if t < p:
            index_tri += 1
        elif p < h:
            index_penta += 1
        else:
            index_hexa += 1
    
    
    
    
    
    